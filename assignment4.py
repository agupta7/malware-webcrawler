#!/usr/bin/python -uB
from WebCrawller import WebCrawller
import json
import numpy as np
import sys
import pickle
from GRNN_latest.GRNN import GRNNPredictor
import util

'''
    unigramList is a list from the output of WebCrawller.crawlIDS function.
    Each member contains the following properties:
        'url': The subject URL
        'unigram': The feature vector in question
'''
def findURLsInRange(dataset, unigramList, lower, upper):
    idealSigma = 0.246711580707
    grnn = GRNNPredictor(dataset, idealSigma)

    for link in unigramList:
        prediction = grnn.predict(link['unigram'])
        if prediction > lower and prediction <= upper:
            print "URL {0} has a prediction of {1} with unigram {2}".format(link['url'], prediction, link['unigram'])
        else:
            print "nomatch : URL {0} has a prediction of {1}".format(link['url'], prediction)


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print >> sys.stderr, "Usage: {0} dataset_file rootURLs...".format(sys.argv[0])
        sys.exit()
    dataset = sys.argv[1]
    rootURLs = sys.argv[2:]

    for rootURL in rootURLs:
        unigramList = None
        if '.unigramList' in rootURL:
            unigramList = pickle.load(open(rootURL, 'rb'))
            print "Loaded {0} unigrams from file.".format(len(unigramList))
        elif '.unigram' in rootURL:
            unigramList = util.treeToList(pickle.load(open(rootURL, 'rb')))
            print "Loaded {0} unigrams from file.".format(len(unigramList))
        else:
            unigramTree = json.loads(WebCrawller.crawlIDS(rootURL, 1)['json'])
            unigramList = util.treeToList(unigramTree)
            pickle.dump(unigramList, open('unigrams/url.unigram', 'wb'))
            print "Saved {0} unigrams to unigrams/url.unigram".format(len(unigramList))

        print "----------- -0.15 to 0.15 ------------"
        findURLsInRange(dataset, unigramList, -0.15, 0.15)
