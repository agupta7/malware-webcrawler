import S_neuronNN
import general
import numpy as np
import cPickle 

def K_Folds (K, X,Y,lr,k,hidden_neurons,emax,itermax,beta, lamda, der):
        Range = len(X)//K; indx = 0 ;   cnt = 1 ;
        GRNN_acc = 0;   FP = 0;	FN = 0; TP = 0 ; TN = 0

	for k in range (K) :
               # create your folds.
		test_D = np.array(X[indx:indx+Range])
                test_L =  np.array(Y[indx:indx+Range])
                train_D = np.concatenate (( X[0:indx], X[indx+Range:len(X)] ))
                train_L =np.concatenate ((Y[0:indx],Y[indx+Range:len(Y)]))
		indx += Range 

                # train
                W1,W2,Error_Curve = S_neuronNN.Train(train_D,train_L,lr,k,hidden_neurons,emax,itermax,beta,lamda, der)

                # predict & evaluate
                output = S_neuronNN.predict (test_D,W1,W2,k,der)
                acc, fp, fn, tp , tn  = general.Accuracy(output,test_L)
                print "Testing Accuracy:%f FP:%d FN:%d TP:%d TN:%d"%(acc,fp,fn,tp,tn)
                FP += fp        ; FN += fn;       GRNN_acc += acc;
                TP += tp ; TN += tn
                cnt+=1
         
#	print
	return GRNN_acc/K, FP, FN, TP , TN

def Main ():
        file = open ("output_iter.txt","w")
        X,Y = general.Load_Data("malware_dataset.csv")
	X, Y = general.shuffle_in_unison_scary (X,Y)
	X = general.Normalization_min_max(X)
#        X = general.standarize (np.array(X))
        print
        # parameters
#       for i in range (5):
#               Der.append ( random.uniform( 0.00001 , 0.01))
        hidden_neurons = 1 ; emax = 0.001 ; K = 3; itermax = 1000
        LR = [0.1  ,0.01,0.001]
        Beta =  [0.807300 ,0.99, 0.853454,0.666, 0.8073]
        Lamda =  [1] # 0.000659,0.000899 ] #,0.00083 ]
        Der =  [0.005490,  0.004776]
        Ks = [1 ,4  ] # ,0.5] #, 0.25]

        Best_Acc = -1 ; b_lr = 0 ; b_beta = 0 ; b_lamda =0 ; count = 0 ; b_der = -1; b_k = -1
        for der in Der:
                for beta in Beta:
                        for lamda in Lamda:
                                for k in Ks:
             				for lr in LR:
		                                acc, FP,FN,TP,TN = K_Folds(K, X,Y,lr,k,hidden_neurons,emax,itermax,beta,lamda,der)
        	                                line1= "\nFinal: acc: %f FP: %d FN: %d TP: %d TN: %d"%(acc, FP,FN,TP,TN)
                	                        line2="\nthis result is at lr %f beta %f k %d lamda %f der %f"%(lr,beta,k,lamda, der)
                        	                print "iter: %d"%count, line1,line2
                                	        count += 1
                                	        file.write (line1)
                                       		file.write(line2)
                                 	        if acc > Best_Acc:
                                            	    Best_Acc = acc ; b_lr = lr ; b_beta = beta ;b_k = k ;  b_lamda = lamda; b_der = der 

        print "best accuracy %f, at lr: %f , beta %f , lamda %f der %f K %d"%(Best_Acc, b_lr, b_beta, b_lamda,b_der,b_k)
        file.close ()
        W1,W2,Error_Curve = S_neuronNN.Train(X,Y,b_lr,k,hidden_neurons,emax,itermax,b_beta, lamda, b_der)

	print "\nstoring NN Model: "
	with open ("Params", "wb") as file:
		cPickle.dump ([b_lr,k,hidden_neurons,emax,itermax,b_beta, lamda, b_der],file)
        with open ("W1", "wb")as file:
                cPickle.dump (W1,file)
        with open ("W2", "wb")as file:
                cPickle.dump (W2,file)
	print "DONE ! "
def Prediction():
        with open ("W1","rb") as file:
                W1 = cPickle.load (file)

        with open ("W2","rb") as file:
                W2 = cPickle.load (file)

        k =4 ; der = 0.004776

        URLS = ["apne.tv", "http://apneserials.tv/", "http://badtameezdil.net/author/starplus-serials/",
                "http://hindimoviesonlines.net/", "https://songs.pk/", "https://www.songspk.bz/", "https://123movies.co/",
                "http://0123movies.com/home.html", "https://pushedwebnews.com/", "https://gomovies.sc/", "123movies.ag/",
                "https://123movies.io/", "www.hindimoviesonline.me/", "hindimoviesonlines.net.websiteoutlook.com/",
                "https://9xbuddy.com/", "website.informer.com/", "songpk.mobi/", "https://songspk3.club",
                "http://www.idlesurvey.com/"]

        URLS = ["https://drive.google.com", "https://facebook.com", "https://google.com",
                "https://amazon.com", "https://whatsapp.com"]

	import unigrames_2
        for indx, url in enumerate(URLS) :
               print "url indx  %d: "%indx, url,
               if  len(unigrames_2.Unigrames[indx]) == 0 :
                        print " Error, No unigram\n"
               else:
                        test = np.array( unigrames_2.Unigrames[indx] ,dtype= float)
#                        test = general.standarize ([test])
                        print " is classified as: ", S_neuronNN.predict ([test] ,W1,W2,k, der)
                        print

Prediction()
#Main ()




