import math
from collections import deque
import numpy as np

class WeightedKnn:

    def __init__(self, dataset):
        self.dataset = dataset

    def predict(self, featureVector, k, b, featureMask):
        neighborhood = WeightedKnn.getKNeighbors(featureVector, self.dataset, k, featureMask)
        outsum = 0
        weightsum = 0
        for neighbor in neighborhood:
            try:
                outsum += (neighbor['distance'] ** -b) * neighbor['output']
                weightsum += neighbor['distance'] ** -b
            except ZeroDivisionError as e:
                return neighbor['output']

        return outsum / weightsum

    @classmethod
    def getDistance(cls, featureVectorA, featureVectorB):
        separation = (featureVectorB - featureVectorA) ** 2

        return math.sqrt(sum(separation))

    @classmethod
    def getKNeighbors(cls, featureVector, vectorList, k, featureMask = None):
        if featureMask is None:
            featureMask = np.ones(len(featureVector))
        for vector in vectorList:
            vector['distance'] = WeightedKnn.getDistance(featureMask * featureVector, featureMask * vector['featureVector'])
        return sorted(vectorList, key=lambda comparator: comparator['distance'] or 0)[:k]
        

def leaveOneOutExperiment(dataset, k, b, featureMask):
    dataset = deque(dataset)
    stats = {'tp': 0, 'tn': 0, 'fp': 0, 'fn': 0}
    
    for i in range(len(dataset)):
        instance = dataset.popleft()

        wkn = WeightedKnn(dataset)
        prediction = wkn.predict(instance['featureVector'], k, b, featureMask)
        prediction = round((prediction + 1) / 2.0) * 2 - 1
        if instance['output'] == 1:
            if prediction == 1:
                stats['tp'] += 1
            else:
                stats['fn'] += 1
        else:
            if prediction == -1:
                stats['tn'] += 1
            else:
                stats['fp'] += 1
        dataset.append(instance)

    accuracy = float(stats['tp'] + stats['tn']) / sum(stats.values())
    stats['accuracy'] = accuracy
    return stats

