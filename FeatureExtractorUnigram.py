import numpy as np
import collections

class FeatureExtractorUnigram:
    @classmethod
    def extractFeatures(cls, fileStream, encoding):
        contents = fileStream.read().decode(encoding)
        ASCII_chars = cls.ASCII_bounded(contents)

        return cls.buildUnigram(ASCII_chars)

    @classmethod
    def ASCII_bounded(cls, contents):
        ASCII_chars = np.array([ord(char) for char in contents]) # get ascci for every char in the html file.

        delete = np.where(ASCII_chars < 32)  # determine the undesired
        ASCII_chars = np.delete(ASCII_chars, delete)        # delete
        delete = np.where(ASCII_chars > 126)  # undesired greater than 126
        ASCII_chars = np.delete(ASCII_chars, delete)

        return ASCII_chars

    @classmethod
    def buildUnigram(cls, ASCII_chars):
        featureVector = []
        charCount = collections.Counter(ASCII_chars)
        length = len(ASCII_chars)

        for char in range(32, 127):
            if length > 0:
                featureVector.append(charCount[char] / float(length))
            else:
                featureVector.append(0)

        return featureVector

