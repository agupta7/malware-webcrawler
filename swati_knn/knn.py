import csv
import random
import math
import operator 

def loadDatasetTrainTest(filename, split, intermediateTrainingSet=[] , testSet=[]):
	
	with open(filename, 'rb') as csvfile:
	    lines = csv.reader(csvfile)
	    dataset = list(lines)

	    for x in range(len(dataset)):
    		for y in range(len(dataset[0])):
    			dataset[x][y] = float(dataset[x][y])
        	random_number = random.random()
        	if  random_number < split:
        		intermediateTrainingSet.append(dataset[x])
        	else:
    			testSet.append(dataset[x])

def loadDatasetTrainValidate(split, intermediateTrainingSet=[] , finalTrainingSet=[], validationSet=[]):
    
    for x in range(len(intermediateTrainingSet)):
        random_number = random.random()
        if  random_number < split:
        	finalTrainingSet.append(intermediateTrainingSet[x])
        else:
            validationSet.append(intermediateTrainingSet[x])

def euclideanDistance(instance1, instance2, length):
    distance = 0
    for x in range(2,length):
        distance += pow((instance1[x] - instance2[x]), 2)
    return math.sqrt(distance)

def getNeighbors(trainingSet, testInstance, k):
    distances = []
    length = len(testInstance)
    for x in range(len(trainingSet)):
        dist = euclideanDistance(testInstance, trainingSet[x], length)
        distances.append((trainingSet[x], dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors

def getResponse(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][1]
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    sortedVotes = sorted(classVotes.iteritems(), key=operator.itemgetter(1), reverse=True)
    return sortedVotes[0][0]

def getAccuracy(testSet, predictions):
    correct = 0
    for x in range(len(testSet)):
        if testSet[x][1] == predictions[x]:
            correct += 1
    return (correct/float(len(testSet))) * 100.0

def main():
    # prepare data
    intermediateTrainingSet=[]
    finalTrainingSet=[]
    testSet=[]
    validationSet=[]
    split = 0.67
    
    loadDatasetTrainTest('new_dataset.csv', split, intermediateTrainingSet, testSet)
    print 'Train set: ' + repr(len(intermediateTrainingSet))
    print 'Test set: ' + repr(len(testSet))

    loadDatasetTrainValidate(split, intermediateTrainingSet, finalTrainingSet, validationSet)
    print 'Final Train: ' + repr(len(finalTrainingSet))
    print 'validation: ' + repr(len(validationSet))

    # generate predictions
    print ('Predictions for Validation.')
    predictions=[]
    k = 3
    for x in range(len(validationSet)):
        neighbors = getNeighbors(finalTrainingSet, validationSet[x], k)
        result = getResponse(neighbors)
        predictions.append(result)
        print('> predicted=' + repr(result) + ', actual=' + repr(validationSet[x][1]))
    accuracy = getAccuracy(validationSet, predictions)
    print('Accuracy for Validation data set: ' + repr(accuracy) + '%')

    print ('Predictions for Test.')
    predictions=[]
    for x in range(len(testSet)):
        neighbors = getNeighbors(finalTrainingSet, testSet[x], k)
        result = getResponse(neighbors)
        predictions.append(result)
        print('> predicted=' + repr(result) + ', actual=' + repr(testSet[x][1]))
    accuracy = getAccuracy(validationSet, predictions)
    print('Accuracy for Test Data Set: ' + repr(accuracy) + '%')
    
main()




