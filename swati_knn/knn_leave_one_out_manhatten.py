import csv
import math
import operator 
import numpy as np

def shuffleDataset(dataset):
    np.random.shuffle(dataset)
    print "Shuffled.."
    
    return dataset

def loadDataset(filename):
    with open(filename, 'rb') as csvfile:
        lines = csv.reader(csvfile)
        dataset = list(lines)

        for x in range(len(dataset)):
            for y in range(len(dataset[0])):
                dataset[x][y] = float(dataset[x][y])

    dataset = np.array(dataset, dtype=float)
    shuffleDataset(dataset)
    return dataset

def splitDataset(dataset, split):
    split1=[]
    split2=[]
    index = int(split*len(dataset))

    split1, split2 = np.split(dataset, [index] )

    return split1, split2, index

def manhattanDistance(instance1, instance2, length):
    distance = 0
    for x in range(2,length):
        distance += abs((instance1[x] - instance2[x]))
    return distance

def getNeighbors(trainingSet, testInstance, k):
    distances = []
    length = len(testInstance)

    for x in range(len(trainingSet)):
        dist = manhattanDistance(testInstance, trainingSet[x], length)
        #print "----------------Distance:"+repr(dist)
        distances.append((trainingSet[x], dist))
    distances.sort(key=operator.itemgetter(1))
    #print distances
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors

def getResponseDiscrete(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][1]
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    sortedVotes = sorted(classVotes.iteritems(), key=operator.itemgetter(1), reverse=True)
    return sortedVotes[0][0]
    
def main():
    # prepare data
    dataset = loadDataset('malware_dataset_old.csv')
    k = 5
    correct = 0.0
    accuracy = 0
    fp = 0
    fn = 0
    tn = 0
    tp = 0
    trainingSet = dataset
    prevTestSetIndex = []
    prevTestSet = np.empty((1, 97))
    print ('Predictions for Test.')
    index = 0
    for x in range(len(dataset)):
        split = float(len(trainingSet)-1)/len(trainingSet)
        # print "Split"+repr(split)
        trainingSet, testSet, i = splitDataset(trainingSet, split)
        # print 'Split Train: ' + repr(trainingSet)
        # print 'Split Test: ' + repr(testSet)
        # print 'Test index: ' + repr(i)
        if index != 0:
            trainingSet = np.concatenate((trainingSet, prevTestSet), axis=0)
        # print 'Concatenate Train: ' + repr(trainingSet)
        # print 'Concatenate Test: ' + repr(testSet)
        neighbors = getNeighbors(trainingSet, testSet[0], k)
        prediction = getResponseDiscrete(neighbors)
        print('> predicted=' + repr(prediction) + ":" + repr(type(prediction)) + ', actual=' + repr(testSet[0][1])) + ":" + repr(type(testSet[0][1]))
        
        if testSet[0][1] == prediction:
            correct += 1

        if testSet[0][1] == 1.0 and prediction == -1.0:
            fp+=1
        elif testSet[0][1] == -1.0 and prediction == 1.0:
            fn+=1
        elif testSet[0][1] == 1.0 and prediction == 1.0:
            tn += 1
        else:
            tp += 1

        prevTestSetIndex.append(i)
        # print "Already Tested:"+repr(prevTestSetIndex)
        if index == 0:
            
            prevTestSet = testSet
        else:
            prevTestSet = np.concatenate((prevTestSet, testSet), axis = 0)
         
            trainingSet = np.delete(trainingSet, prevTestSetIndex, axis = 0)
        # print 'Diff Train: ' + repr(trainingSet)
        # print 'Diff Test: ' + repr(testSet)
        index += 1
    
    accuracy = correct/len(dataset) * 100.0

    print('Results: ' + repr(accuracy) + '%' + ',' + repr(fp) + ','+ repr(fn) + ',' +
     repr(tn) + ','+ repr(tp))
    
main()




