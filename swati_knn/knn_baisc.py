import csv
import math
import operator 
import numpy as np

def shuffleDataset(dataset):
    np.random.shuffle(dataset)
    # print "Shuffled.."
    
    return dataset

def loadDataset(filename):
    with open(filename, 'rb') as csvfile:
        lines = csv.reader(csvfile)
        dataset = list(lines)

        for x in range(len(dataset)):
            for y in range(len(dataset[0])):
                dataset[x][y] = float(dataset[x][y])

    dataset = np.array(dataset, dtype=float)
    shuffleDataset(dataset)
    return dataset

def splitDataset(dataset, split):
    split1=[]
    split2=[]
    index = int(split*len(dataset))

    split1, split2 = np.split(dataset, [index] )

    return split1, split2

def euclideanDistance(instance1, instance2, length):
    distance = 0
    for x in range(2,length):
        distance += pow((instance1[x] - instance2[x]), 2)
    return math.sqrt(distance)

def getNeighbors(trainingSet, testInstance, k):
    distances = []
    length = len(testInstance)

    for x in range(len(trainingSet)):
        dist = euclideanDistance(testInstance, trainingSet[x], length)
        #print "----------------Distance:"+repr(dist)
        distances.append((trainingSet[x], dist))
    distances.sort(key=operator.itemgetter(1))
    #print distances
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors

def getResponseDiscrete(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][1]
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    sortedVotes = sorted(classVotes.iteritems(), key=operator.itemgetter(1), reverse=True)
    return sortedVotes[0][0]

def getResponseContinuous(neighbors):
    response = 0
    for x in range(len(neighbors)):
        response += neighbors[x][1]
    return (response/(len(neighbors)))

def getAccuracyDiscrete(testSet, predictions):
    fp = 0
    fn = 0
    tp = 0 
    tn = 0
    correct = 0.0

    for x in range(len(testSet)):
        if testSet[x][1] == predictions[x]:
            correct += 1
        if testSet[x][1] == 1.0 and predictions[x] == -1.0:
            fp+=1
        elif testSet[x][1] == -1.0 and predictions[x] == 1.0:
            fn+=1
        elif testSet[x][1] == 1.0 and predictions[x] == 1.0:
            tp += 1
        else:
            tn += 1
    accuracy = (correct/len(testSet)) * 100.0
    return accuracy, fp, fn, tn, tp
    

def getAccuracyContinuous(testSet, predictions):
    correct = 0.0
    fp, fn, tn, tp = 0

    for x in range(len(testSet)):
        if testSet[x][1] > 0 and  predictions[x] >= 0:
            correct += 1

        if testSet[x][1] < 0 and predictions[x] < 0:
            correct +=1

        if testSet[x][1] >= 0 and predictions[x] < 0:
            fp+=1
        if testSet[x][1] < 0 and predictions[x] >= 0:
            fn+=1
        if testSet[x][1] >= 0 and predictions[x] >= 0:
            tp += 1
        if testSet[x][1] < 0 and predictions[x] < 0:
            tn += 1

    accuracy = (correct/len(testSet)) * 100.0
    return accuracy, fp, fn, tn, tp

def main():
    #Repeat the process 5 times to get better results:
    avg_accuracy = 0.0
    avg_fp = 0
    avg_fn = 0
    avg_tp = 0
    avg_tn = 0
    for index in range(5):

        # prepare data
        dataset = loadDataset('malware_dataset_old.csv')
        k = 5
        split = 0.7
        predictions = []
        intermediateTrainingSet, testSet = splitDataset(dataset, split)
        # print 'Train set: ' + repr(len(intermediateTrainingSet))
        # print 'Test set: ' + repr(len(testSet))
        # print 'Data set Type:' + repr(type(intermediateTrainingSet))
        # print 'Data Type:' + repr(type(intermediateTrainingSet[0]))
        # print 'Result Type:' + repr(type(intermediateTrainingSet[0][1]))
        # print 'Feature Type:' + repr(type(intermediateTrainingSet[0][2]))

        finalTrainingSet, validationSet = splitDataset(intermediateTrainingSet, split)
        # print 'Final Train: ' + repr(len(finalTrainingSet))
        # print 'validation: ' + repr(len(validationSet))

        # generate predictions
        # print ('Predictions for Validation.')
        for x in range(len(validationSet)):
            neighbors = getNeighbors(finalTrainingSet, validationSet[x], k)
            result = getResponseDiscrete(neighbors)
            predictions.append(result)
            # print('> predicted=' + repr(result) + ":" + repr(type(result)) + ', actual=' + repr(validationSet[x][1])) + ":" + repr(type(validationSet[x][1]))
        accuracy, fp, fn, tp, tn = getAccuracyDiscrete(validationSet, predictions)
        # print('Accuracy for Validation data set: ' + repr(accuracy) + '%')
        # print('FP for Validation data set: ' + repr(fp))
        # print('FN for Validation data set: ' + repr(fn))
        # print('TN for Validation data set: ' + repr(tn))
        # print('TP for Validation data set: ' + repr(tp))

        # print ('Predictions for Test.')
        predictions=[]
        for x in range(len(testSet)):
            neighbors = getNeighbors(finalTrainingSet, testSet[x], k)
            result = getResponseDiscrete(neighbors)
            predictions.append(result)
            # print('> predicted=' + repr(result) + ":" + repr(type(result)) + ', actual=' + repr(testSet[x][1])) + ":" + repr(type(testSet[x][1]))
        accuracy, fp, fn, tp, tn = getAccuracyDiscrete(testSet, predictions)
        avg_accuracy += accuracy
        avg_fp += fp
        avg_fn += fn
        avg_tp += tp
        avg_tn += tn

    # Collecting Results
    avg_accuracy = avg_accuracy/5
    accuracy = round(avg_accuracy, 2)
    fp = int(avg_fp/5)
    fn = int(avg_fn/5)
    tp = int(avg_tp/5)
    tn = int(avg_tn/5)

    print(repr(accuracy) + ',' + repr(fp) + ',' + repr(fn) + ',' + repr(tn) + ',' + repr(tp))
    
main()




