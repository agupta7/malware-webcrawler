#!/usr/bin/python -B
import csv
import numpy as np
import math
import weightedknn.weighted_knn
from weightedknn.leaveOneOut import leaveOneOutExperiment
import weightedknn.WeightedKnnFeatureMaskEvolution as  wkfme
import sys

def main_assignment2():
    if len(sys.argv) < 2:
        print >> sys.stderr, "Usage: " + sys.argv[0] + " dataset_file"
    else:
        weightedKnnExperiment(sys.argv[1])

def loadDataset(filename):
    def mapper(line):
        obj = {}
        obj['id'] = line[0]
        obj['output'] = float(line[1])
        obj['featureVector'] = np.array(map(lambda s: float(s), line[2::]))
        obj['distance'] = None
        return obj

    fh = open(filename, 'r')

    return map(mapper, csv.reader(fh))

def normalizeToUnitVector(dataset):
    for instance in dataset:
        radius = math.sqrt(sum(instance['featureVector'] ** 2))
        if radius != 0:
            instance['featureVector'] = instance['featureVector'] / radius

def weightedKnnExperiment(dataset_file):
    dataset = loadDataset(dataset_file)
    normalizeToUnitVector(dataset)

    def evaluateFitness(member):
        stats = leaveOneOutExperiment(dataset, len(dataset) - 1, 10, member)
        return stats['accuracy']


    for k in (1, 3, 5, 594):
        stats = leaveOneOutExperiment(dataset, k, 10, None)
        print 'k=' + str(k) + ':'
        print '   accuracy: ' + str(stats['accuracy'])
        print '   tp: ' + str(stats['tp']) + '   tn: ' + str(stats['tn'])
        print '   fp: ' + str(stats['fp']) + '   fn: ' + str(stats['fn'])

    ga = wkfme.WeightedKnnFeatureMaskEvolution(evaluateFitness, -1, 5)
    print "It's evolving!---------------------------"
    featureMask = ga.evolveFeatureMask()
    stats = leaveOneOutExperiment(dataset, len(dataset) - 1, 10, featureMask)
    print 'featureMask: ' + str(featureMask)
    print '   accuracy: ' + str(stats['accuracy'])
    print '   tp: ' + str(stats['tp']) + '   tn: ' + str(stats['tn'])
    print '   fp: ' + str(stats['fp']) + '   fn: ' + str(stats['fn'])

if __name__ == "__main__":
    main_assignment2()
